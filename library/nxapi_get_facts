#!/usr/bin/env python2.7

#TODO: Insert pep8 compliant docstring
''' docstring here '''

# Copyright (c) 2014 Matt Oswalt
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

DOCUMENTATION = '''
---
module: nxapi_get_facts
author: Matt Oswalt
version_added: 1.0
short_description: Retrieve Nexus 9000 device facts
description:
    - Nexus 9000 facts returns as a JSON dictionary, includes items
      such as hardware/firmware information, running protocols, existing routes
requirements:
    - Mierdin's fork of nexus9000 https://github.com/Mierdin/nexus9000
options:
    host:
        description:
            - should be {{ inventory_hostname }}
        required: true  
    user:
        description:
            - login user-name 
        required: true
        default: "admin"
    passwd:
        description:
            - login password
        required: true 
        default: assumes ssh-key              
    logfile:
        description:
            - location for log file
        required: false 
        default: None        
'''

EXAMPLES = '''
# pulling down facts via NX-API

- nxapi_get_facts:
    host={{ inventory_hostname }}
    user="admin"
    passwd="cisco"
    logfile="insieme.log"
  register: insieme

# accessing the facts

- name: NX-OS version
  debug: msg="{{ insieme.facts.HWFW.rr_sys_ver }}"
'''

#TODO: Lots of invalid var names. Need to decide on nomenclature and fix


#TODO: dependency on new library. Re-enable old line for current testing.
from cisco.nxapi.nxapiutils.nxapi_utils import NXAPI
#from nxos.nxapi.utils.nxapi_utils import NXAPI
#rom collections import OrderedDict
#from array import *
import logging
import json
#from os.path import isfile
#import os
#import sys

def getHWFW(thisNXAPI):
    ''' Retrieves information about the switch's hardware/firmware '''
    thisNXAPI.set_cmd('show version')
    returnList = thisNXAPI.send_req()
    returnDict = json.loads(returnList[1])
    return returnDict['ins_api']['outputs']['output']['body']

def getRoutes(thisNXAPI):
    ''' CURRENTLY UNUSED - retrieves all routes from the RIB '''
    thisNXAPI.set_cmd('show ip route')
    returnList = thisNXAPI.send_req()
    returnDict = json.loads(returnList[1])
    return returnDict['ins_api']['outputs']['output']['body']['TABLE_vrf']


def pcCheck(thisNXAPI, local_if):
    '''
    Checks if an interface is part of a port channel.
    If it is, this function returns the name of that port channel.
    If not, then the original local_if argument is returned.
    '''

    thisNXAPI.set_cmd('show interface ' + local_if)
    returnList = thisNXAPI.send_req()
    returnDict = json.loads(returnList[1])

    pcName = ""

    try:
        pcName = returnDict['ins_api']['outputs']['output']['body'] \
                ['TABLE_interface']['ROW_interface']['eth_bundle']
        #if 'eth_bundle' key is present, then port is a PC member
    except KeyError:
        logging.info(local_if + " is not a member of a port channel.")
        return local_if
    else:
        return pcName

def getCDPNeighbors(thisNXAPI):

    thisNXAPI.set_cmd('show license host-id')
    returnList = thisNXAPI.send_req()
    returnDict = json.loads(returnList[1])

    #Pull local host ID
    localHostID = returnDict['ins_api']['outputs']['output']['body'] \
            ['host_id'][4:] #gets rid of the VDH=

    #retrieving local host id for some reason. This should already be retrieved
    #from normal fact gathering but who knows maybe you need this here too

    logging.info('Now pulling neighbor info from ' + localHostID)

    thisNXAPI.set_cmd('show cdp neigh det')
    returnList = thisNXAPI.send_req() 

    #getting rid of hostid for now, may want to re-enable
    #prunedInfo = dict(hostid=hostid)
    prunedInfo = dict()

    #TODO: Doesn't currently handle multiple routed paths to the same switch.
            #need to do a pcCheck first thing, then you can see if a CDP
            # neighbor is truly a duplicate only if it shows up on the same
            # port channel interface (or an IF not in a lag)

    #TODO: Assumes multiple CDP neighbors. Needs the ROW handling fix.
    for row in json.loads(returnList[1])['ins_api']['outputs']['output'] \
        ['body']['TABLE_cdp_neighbor_detail_info'] \
        ['ROW_cdp_neighbor_detail_info']:

        #logging.info('asdf ---------- ' + prunedInfo)

        # If the switch is NOT a Nexus 9300, skip this device.
        if row['platform_id'][:7] != 'N9K-C93': #TODO: Find another way to ID
            #logging.info('Not adding ' + row['platform_id'][:7])
            continue

        # Extract host id from "device_id" field
        remoteHostID = row['device_id'][row['device_id'].index('(')+1:-1]

        # Skip if we already have this device listed in our table.
        if remoteHostID in prunedInfo:
            logging.info(row['device_id'] + ' already in inventory')
            continue #We already have this neighbor, no need to add it
            #TODO: This obviously doesn't handle multiple routed paths to the
            #same device, which we should be doing. Fix this.

        logging.info("Adding host to inventory: {}".format(remoteHostID))

        #getting remote interface details
        remoteNXAPI = NXAPI()
        remoteNXAPI.set_target_url('http://' + row['v4mgmtaddr'] + '/ins')

        #TODO: Need to re-design this. What if this switch's creds are
            # not the same as the current node this module is running on?
        remoteNXAPI.set_username('admin')
        remoteNXAPI.set_password('Cisco.com')
        remoteNXAPI.set_out_format('json')
        remoteNXAPI.set_msg_type('cli_show')

        #An idea for the re-design here is to maintain a topology table
        #elsewhere of what ports go to what switches. Once facts are gathered
        #from the entire topology, it would be fairly straightforward to go
        #back through that table and do your checks

        #TODO: Another reason for a re-design of this. I need to use
            # something to identify the remote switch, and right now
            # I have to connect to it and retrieve the host ID. Preference
            # would be to use some kind of property already available via
            # CDP on the local switch being accessed. Then all I would need
            # to do is have some kind of lookup that grabs the right creds
            # from a table using that parameter as a key. (another module)

        newItemDetails = dict()
        newItemDetails['local_if'] = pcCheck(thisNXAPI, row['intf_id'])
        newItemDetails['remote_if'] = pcCheck(remoteNXAPI, row['port_id'])
        newItemDetails['mgmt_ipv4'] = row['v4mgmtaddr']

        #Using REMOTE host ID as a unique key for this neighbor
        #TODO: Obviously not ideal if there are multiple routed paths (not
        #including multiple ports in a port channel) to the same neighbor. This
        #will get overwritten in that case. Maybe use hostid + interface id?
        #look into ifindex in CDP
        #note that device_id only contains hostid if it's another 9K it seems
        prunedInfo[remoteHostID] = newItemDetails


    return prunedInfo
    #return thisSwitchDict



def main():
    module = AnsibleModule(
        argument_spec=dict( \
            host=dict(required=True), \
            user=dict(required=False, default='admin'), \
            passwd=dict(required=False, default=None), \
            logfile=dict(required=False, default=None)), \
        supports_check_mode=False)

    m_args = module.params
    m_results = dict(changed=False)

    #Configure logging
    logfile = module.params.get('logfile')
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO, \
            format='--- NXAPI_GET_FACTS --- ' + \
            ' %(asctime)s:%(name)s:%(message)s')

        logging.getLogger().name = 'CONFIG:'+m_args['host']

    logging.info("Connecting to host: {}".format(m_args['host']))

    thisNXAPI = NXAPI()
    thisNXAPI.set_target_url('http://' + m_args['host'] + '/ins')
    thisNXAPI.set_username(m_args['user'])
    thisNXAPI.set_password(m_args['passwd'])
    thisNXAPI.set_out_format('json')
    thisNXAPI.set_msg_type('cli_show')

    factDict = dict()

    logging.info('Now retrieving general facts')
    factDict['HWFW'] = getHWFW(thisNXAPI)
    m_results['facts'] = factDict

    logging.info('Now retrieving CDP neighbor information')
    m_results['topo'] = getCDPNeighbors(thisNXAPI)

    #TODO: Just too much extra overhead right now. Consider removing this
    #factDict['routes'] = getRoutes(thisNXAPI)

    m_results['args'] = m_args        # for debug
    module.exit_json(**m_results)

from ansible.module_utils.basic import *
main()

